# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ReturnMessageBase {
  success: Boolean!
  message: String!
}

type Query {
  getWhitelistOfFilm(filmId: ID!): [WhitelistEntity!]!
  getFilmCollectionNFTById(id: ID!): PublicInformationFilmCollectionNFT!
  getCompressedNFTsOfFilm(filmId: ID!, first: Int, after: String, last: Int, before: String): PaginatedCompressedNFT!
  getCompressedNFT(id: ID!): FilmCompressedNFTEntity!
  getFilmById(id: ID!): FilmEntity!
  getFilms(first: Int, after: String, last: Int, before: String): PaginatedFilm!
  getGalleriesOfFilm(filmId: ID!, first: Int, after: String, last: Int, before: String): PaginatedFilmGallery!
  getGalleryById(id: ID!): FilmGalleryEntity!
  logOut: ReturnMessageBase!
  refreshToken: ReturnTokenDto!
  getSolanaAddress: ReturnSolanaAddressDto!
  helloFilmMaker: String!
  getFilmMakerById(id: ID!): PersonEntity!
}

type WhitelistEntity {
  id: ID!
  personId: Float!
  filmId: Float!
  person: PublicInformationPerson!
}

type PublicInformationPerson {
  id: ID!
  publicKey: String
  email: String
  avatar: String
  background: String
  name: String!
  bio: String
}

type PublicInformationFilmCollectionNFT {
  id: ID!
  name: String!
  symbol: String!
  uri: String!
}

type PaginatedCompressedNFT {
  edges: [FilmCompressedNFTEntityEdge!]
  pageInfo: PageInfo
}

type FilmCompressedNFTEntityEdge {
  cursor: String!
  node: FilmCompressedNFTEntity!
}

type FilmCompressedNFTEntity {
  id: ID!
  name: String!
  symbol: String!
  uri: String!
  filmId: Float!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type FilmEntity {
  id: ID!
  name: String!
  description: String!
  background: String!
  avatar: String!
  duration: Int!
  releaseDate: DateTime!
  genres: [String!]!
  stars: [String!]!
  directors: [String!]!
  adminProcess: AdminProcessStatus!
  status: FilmStatus!
  topCasts: [FilmTopCast!]
  endDateSubscriber: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AdminProcessStatus {
  APPROVED
  REJECTED
  PENDING
}

enum FilmStatus {
  COMING_SOON
  ON_GOING
}

type FilmTopCast {
  name: String!
  avatar: String!
}

type PaginatedFilm {
  edges: [FilmEntityEdge!]
  pageInfo: PageInfo
}

type FilmEntityEdge {
  cursor: String!
  node: FilmEntity!
}

type PaginatedFilmGallery {
  edges: [FilmGalleryEntityEdge!]
  pageInfo: PageInfo
}

type FilmGalleryEntityEdge {
  cursor: String!
  node: FilmGalleryEntity!
}

type FilmGalleryEntity {
  id: ID!
  name: String
  url: String!
  type: GalleryType!
  filmId: Float!
}

enum GalleryType {
  IMAGE
  VIDEO
}

type ReturnTokenDto {
  accessToken: String!
  refreshToken: String!
}

type ReturnSolanaAddressDto {
  address: String!
}

type PersonEntity {
  id: ID!
  publicKey: String
  email: String
  password: String
  avatar: String
  background: String
  name: String!
  bio: String
  discord: String
  youtube: String
  twitter: String
  instagram: String
  refreshToken: String
  role: Role!
}

enum Role {
  ADMIN
  USER
  FILMMAKER
}

type Mutation {
  uploadImageToCloudinary(input: FileUploadInput!): ReturnMessageBase!
  updateInformation(input: UpdateInformationDto!): ReturnMessageBase!
  createCollection(input: CreateCollectionNFTDto!): ReturnMessageBase!
  createCompressedNFTMetadata(input: CreateCompressedNFTMetadata!): ReturnMessageBase!
  mintCompressedNFT(cNFTId: ID!): ReturnMessageBase!
  subscribeToWhitelist(filmId: ID!): ReturnMessageBase!
  createFilm(input: CreateFilmDto!): ReturnMessageBase!

  """
  This api used for update information about the film. For the top cast do not pass the value to the api. Can be used this to update the end date of subscribe for user to be a whitelist of film
  """
  updateFilm(input: UpdateFilmDto!): ReturnMessageBase!
  upsertGalleryFilm(input: UpsertGalleryFilmDto!): ReturnMessageBase!
  signUp(input: CreateAccountDto!): ReturnAccountDto!
  signIn(input: SignInDto!): ReturnAccountDto!
  signInWithSocial(input: SignInWithSocialDto!): ReturnAccountDto!
}

input FileUploadInput {
  file: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateInformationDto {
  publicKey: String
  avatar: String
  background: String
  name: String
  bio: String
}

input CreateCollectionNFTDto {
  filmId: Float!
  metadata: CollectionMetadataDto!
}

input CollectionMetadataDto {
  name: String!
  symbol: String!
  uri: String!
}

input CreateCompressedNFTMetadata {
  filmId: ID!
  name: String!
  symbol: String!
  uri: String!
}

input CreateFilmDto {
  name: String!
  description: String!
  background: String!
  avatar: String!
  duration: Int!
  releaseDate: DateTime!
  genres: [String!]! = []
  stars: [String!]! = []
  directors: [String!]! = []
  topCasts: [FilmTopCastInput!]! = []
  endDateSubscriber: DateTime!
}

input FilmTopCastInput {
  name: String!
  avatar: String!
}

input UpdateFilmDto {
  name: String
  description: String
  background: String
  avatar: String
  duration: Int
  releaseDate: DateTime
  genres: [String!] = []
  stars: [String!] = []
  directors: [String!] = []
  topCasts: [FilmTopCastInput!] = []
  endDateSubscriber: DateTime
  id: ID!
}

input UpsertGalleryFilmDto {
  id: Float
  name: String!
  url: String!
  filmId: Float!
}

type ReturnAccountDto {
  accessToken: String!
  refreshToken: String!
  person: PersonEntity!
}

input CreateAccountDto {
  name: String!
  email: String!
  password: String!
  role: Role!
}

input SignInDto {
  email: String!
  password: String!
}

input SignInWithSocialDto {
  publicKey: String!
  role: Role!
}